/* Our expression language */

/* Terminals (tokens returned by the scanner). */
terminal                    PLUS, MINUS, TIMES, LPAREN, RPAREN, DIVIDE;
terminal                    CARROT, LN, LOG, SQRT, COMMA, ECON;
terminal String             VARIABLE, TRIG;
terminal Integer            NUMBER;

/* Non terminals */
non terminal Expression     expr, term, factor, base;

expr ::= expr:e PLUS term:t                             {: RESULT = add(e, t); :}
        | expr:e PLUS MINUS term:t                      {: RESULT = add(e, negate(t)); :}
        | expr:e MINUS term:t                           {: RESULT = add(e, negate(t)); :}
        | term:t                                        {: RESULT = t; :}
        ;
term ::= term:t TIMES factor:f                          {: RESULT = mult(t, f); :}
        | term:t factor:f                               {: RESULT = mult(t, f); :}
        | term:t DIVIDE factor:f                        {: RESULT = div(t, f); :}
        | factor:f                                      {: RESULT = f; :}
        ;
factor ::= base:b CARROT factor:f                       {: RESULT = power(b, f); :}
        | base:b                                        {: RESULT = b; :}
        ;
base ::= NUMBER:n                                       {: RESULT = constant(n); :}
        | ECON                                          {: RESULT = e(); :}
        | VARIABLE:x                                    {: RESULT = var(x); :}
        | LPAREN expr:e RPAREN                          {: RESULT = e; :}
        | TRIG:t LPAREN expr:e RPAREN                   {: RESULT = trig(t, e); :}
        | LN LPAREN expr:e RPAREN                       {: RESULT = ln(e); :}
        | LOG LPAREN expr:e RPAREN                      {: RESULT = log(constant(10), e); :}
        | SQRT LPAREN expr:e RPAREN                     {: RESULT = poly(e, -2); :}
        | LOG LPAREN expr:e1 COMMA expr:e2 RPAREN       {: RESULT = log(e1, e2); :}
        ;
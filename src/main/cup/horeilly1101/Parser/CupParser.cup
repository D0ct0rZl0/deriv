/* Our expression language */

/* Terminals (tokens returned by the scanner). */
terminal                    PLUS, MINUS, TIMES, LPAREN, RPAREN, DIVIDE;
terminal                    CARROT, LN, LOG, SQRT, COMMA, ECON;
terminal String             VARIABLE, TRIG;
terminal Integer            NUMBER;

/* Non terminals */
non terminal Expression     expr, value;

/* Precedences */
precedence right            CARROT;
precedence left             PLUS, MINUS;
precedence left             TIMES, DIVIDE;

/* The grammar rules */
expr    ::= expr:e1 CARROT expr:e2                      {: RESULT = power(e1, e2); :}
        | value:v expr:e                                {: RESULT = mult(v, e); :} // implicit multiplication
        | expr:e1 TIMES expr:e2                         {: RESULT = mult(e1, e2); :}
        | expr:e1 DIVIDE expr:e2                        {: RESULT = div(e1, e2); :}
        | expr:e1 PLUS MINUS expr:e2                    {: RESULT = add(e1, negate(e2)); :}
        | expr:e1 PLUS expr:e2                          {: RESULT = add(e1, e2); :}
        | expr:e1 MINUS expr:e2                         {: RESULT = add(e1, negate(e2)); :}
        | TRIG:t LPAREN expr:e RPAREN                   {: RESULT = trig(t, e); :}
        | LN LPAREN expr:e RPAREN                       {: RESULT = ln(e); :}
        | LOG LPAREN expr:e RPAREN                      {: RESULT = log(constant(10), e); :}
        | SQRT LPAREN expr:e RPAREN                     {: RESULT = poly(e, -2); :}
        | LOG LPAREN expr:e1 COMMA expr:e2 RPAREN       {: RESULT = log(e1, e2); :}
        | value:v                                       {: RESULT = v; :}
        ;

value   ::= NUMBER:n                                    {: RESULT = constant(n); :}
        | ECON                                          {: RESULT = e(); :}
        | VARIABLE:x                                    {: RESULT = var(x); :}
        | LPAREN expr:e RPAREN                          {: RESULT = e; :}
        ;

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package horeilly1101.Parser;

import java_cup.runtime.XMLElement;
import horeilly1101.Expression.Expression;
import static horeilly1101.Expression.Log.*;
import static horeilly1101.Expression.Mult.*;
import static horeilly1101.Expression.Add.*;
import static horeilly1101.Expression.Constant.*;
import static horeilly1101.Expression.Trig.*;
import static horeilly1101.Expression.Variable.*;
import static horeilly1101.Expression.Power.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CupParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CupParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CupParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CupParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\005\000\002\002\005\000\002\002\006" +
    "\000\002\002\005\000\002\002\005\000\002\002\006\000" +
    "\002\002\006\000\002\002\006\000\002\002\006\000\002" +
    "\002\010\000\002\002\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\022\007\014\013\004\014\015\015\011\017" +
    "\010\020\007\021\006\022\005\001\002\000\004\007\052" +
    "\001\002\000\042\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\001\002\000" +
    "\004\007\047\001\002\000\042\002\ufff1\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\001\002\000\042\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\001\002\000" +
    "\004\007\044\001\002\000\016\002\043\004\022\005\023" +
    "\006\026\011\024\012\025\001\002\000\042\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\014\010\ufff4\011\ufff4\012\ufff4" +
    "\013\004\014\015\015\011\016\ufff4\017\010\020\007\021" +
    "\006\022\005\001\002\000\022\007\014\013\004\014\015" +
    "\015\011\017\010\020\007\021\006\022\005\001\002\000" +
    "\004\007\016\001\002\000\022\007\014\013\004\014\015" +
    "\015\011\017\010\020\007\021\006\022\005\001\002\000" +
    "\020\004\022\005\023\006\026\010\021\011\024\012\025" +
    "\016\020\001\002\000\022\007\014\013\004\014\015\015" +
    "\011\017\010\020\007\021\006\022\005\001\002\000\022" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\016\ufff7\001\002\000\024\005\033\007\014\013\004" +
    "\014\015\015\011\017\010\020\007\021\006\022\005\001" +
    "\002\000\022\007\014\013\004\014\015\015\011\017\010" +
    "\020\007\021\006\022\005\001\002\000\022\007\014\013" +
    "\004\014\015\015\011\017\010\020\007\021\006\022\005" +
    "\001\002\000\022\007\014\013\004\014\015\015\011\017" +
    "\010\020\007\021\006\022\005\001\002\000\022\007\014" +
    "\013\004\014\015\015\011\017\010\020\007\021\006\022" +
    "\005\001\002\000\022\002\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\016\ufffe\001\002\000\022\002" +
    "\001\004\022\005\023\006\026\010\001\011\024\012\025" +
    "\016\001\001\002\000\022\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\016\ufffd\001\002\000\022" +
    "\002\ufffa\004\ufffa\005\ufffa\006\026\010\ufffa\011\024\012" +
    "\ufffa\016\ufffa\001\002\000\022\007\014\013\004\014\015" +
    "\015\011\017\010\020\007\021\006\022\005\001\002\000" +
    "\022\002\ufffb\004\ufffb\005\ufffb\006\026\010\ufffb\011\024" +
    "\012\ufffb\016\ufffb\001\002\000\022\002\ufffc\004\ufffc\005" +
    "\ufffc\006\026\010\ufffc\011\024\012\ufffc\016\ufffc\001\002" +
    "\000\016\004\022\005\023\006\026\010\037\011\024\012" +
    "\025\001\002\000\022\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\016\ufff5\001\002\000\016\004" +
    "\022\005\023\006\026\010\041\011\024\012\025\001\002" +
    "\000\042\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\001\002\000\022\002" +
    "\uffff\004\022\005\023\006\026\010\uffff\011\024\012\025" +
    "\016\uffff\001\002\000\004\002\000\001\002\000\022\007" +
    "\014\013\004\014\015\015\011\017\010\020\007\021\006" +
    "\022\005\001\002\000\016\004\022\005\023\006\026\010" +
    "\046\011\024\012\025\001\002\000\022\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\010\ufff6\011\ufff6\012\ufff6\016\ufff6\001" +
    "\002\000\022\007\014\013\004\014\015\015\011\017\010" +
    "\020\007\021\006\022\005\001\002\000\016\004\022\005" +
    "\023\006\026\010\051\011\024\012\025\001\002\000\022" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\016\ufff9\001\002\000\022\007\014\013\004\014\015" +
    "\015\011\017\010\020\007\021\006\022\005\001\002\000" +
    "\016\004\022\005\023\006\026\010\054\011\024\012\025" +
    "\001\002\000\022\002\ufff8\004\ufff8\005\ufff8\006\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\016\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\006\002\011\003\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\041\003\012\001\001\000\006\002\037\003\012" +
    "\001\001\000\002\001\001\000\006\002\016\003\012\001" +
    "\001\000\002\001\001\000\006\002\035\003\012\001\001" +
    "\000\002\001\001\000\006\002\033\003\012\001\001\000" +
    "\006\002\031\003\012\001\001\000\006\002\030\003\012" +
    "\001\001\000\006\002\027\003\012\001\001\000\006\002" +
    "\026\003\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\034\003" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\044" +
    "\003\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\047\003\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\052\003\012\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CupParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CupParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CupParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CupParser$actions {
  private final CupParser parser;

  /** Constructor */
  CUP$CupParser$actions(CupParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CupParser$do_action_part00000000(
    int                        CUP$CupParser$act_num,
    java_cup.runtime.lr_parser CUP$CupParser$parser,
    java.util.Stack            CUP$CupParser$stack,
    int                        CUP$CupParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CupParser$result;

      /* select the action based on the action number */
      switch (CUP$CupParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr ::= expr CARROT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = power(e1, e2); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Expression start_val = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		RESULT = start_val;
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CupParser$parser.done_parsing();
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= value expr 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = mult(v, e); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr TIMES expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = mult(e1, e2); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr DIVIDE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = div(e1, e2); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr PLUS MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = add(e1, negate(e2)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = add(e1, e2); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = add(e1, negate(e2)); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= TRIG LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = trig(t, e); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= LN LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = ln(e); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= LOG LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = log(constant(10), e); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= SQRT LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = poly(e, -2); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= LOG LPAREN expr COMMA expr RPAREN 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = log(e1, e2); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= value 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = v; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // value ::= NUMBER 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = constant(n); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // value ::= ECON 
            {
              Expression RESULT =null;
		 RESULT = e(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // value ::= VARIABLE 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = var(x); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // value ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = e; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CupParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CupParser$do_action(
    int                        CUP$CupParser$act_num,
    java_cup.runtime.lr_parser CUP$CupParser$parser,
    java.util.Stack            CUP$CupParser$stack,
    int                        CUP$CupParser$top)
    throws java.lang.Exception
    {
              return CUP$CupParser$do_action_part00000000(
                               CUP$CupParser$act_num,
                               CUP$CupParser$parser,
                               CUP$CupParser$stack,
                               CUP$CupParser$top);
    }
}

}
